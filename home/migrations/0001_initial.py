# Generated by Django 5.0.3 on 2024-04-24 22:51

import cloudinary.models
import django.core.serializers.json
import django.db.models.deletion
import modelcluster.fields
import wagtail.contrib.forms.models
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0091_remove_revision_submitted_for_moderation'),
    ]

    operations = [
        migrations.CreateModel(
            name='About',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('who_we_are', wagtail.fields.RichTextField(blank=True, null=True)),
                ('who_we_are_image', cloudinary.models.CloudinaryField(blank=True, help_text='Who we are image', max_length=255, null=True, verbose_name='image')),
                ('our_belief', wagtail.fields.RichTextField(blank=True, null=True)),
                ('our_belief_image', cloudinary.models.CloudinaryField(blank=True, help_text='Our believe image', max_length=255, null=True, verbose_name='image')),
                ('advert_image', cloudinary.models.CloudinaryField(blank=True, help_text='You can add a unique advertisement banner image here', max_length=255, null=True, verbose_name='image')),
                ('regional_overseer', wagtail.fields.RichTextField(blank=True, null=True)),
                ('general_superintendent', wagtail.fields.RichTextField(blank=True, null=True)),
                ('GS_image', cloudinary.models.CloudinaryField(blank=True, help_text='Select image of the General Superintendent', max_length=255, null=True, verbose_name='image')),
                ('message_from_location_church_heading', models.CharField(blank=True, help_text='Write a short inspiring heading', max_length=500, null=True)),
                ('message_from_location_church_text', wagtail.fields.RichTextField(blank=True, help_text='Write a short inspiring message here', null=True)),
                ('message_from_location_church_text2', wagtail.fields.RichTextField(blank=True, help_text='Write a short inspiring message here', null=True)),
                ('location_church_image1', cloudinary.models.CloudinaryField(blank=True, help_text='Location church image 1', max_length=255, null=True, verbose_name='image')),
                ('location_church_image2', cloudinary.models.CloudinaryField(blank=True, help_text='Location church image 2', max_length=255, null=True, verbose_name='image')),
                ('location_church_image3', cloudinary.models.CloudinaryField(blank=True, help_text='Location church image 3', max_length=255, null=True, verbose_name='image')),
                ('learn_more', models.URLField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ContactFormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, validators=[wagtail.contrib.forms.models.validate_to_address], verbose_name='to address')),
                ('from_address', models.EmailField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.forms.models.FormMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='DailyDevotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('devotion_type', models.CharField(blank=True, max_length=500, null=True)),
                ('devotion_url', models.URLField(blank=True, null=True)),
                ('devotion_image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
            ],
        ),
        migrations.CreateModel(
            name='Donate',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('caption_title', wagtail.fields.RichTextField(blank=True, null=True)),
                ('caption_text', wagtail.fields.RichTextField(blank=True, null=True)),
                ('donate_link', models.URLField(blank=True, null=True)),
                ('cashapp_tag', models.CharField(blank=True, max_length=500, null=True)),
                ('cashapp_number', models.CharField(blank=True, max_length=500, null=True)),
                ('mailing_address', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(blank=True, max_length=500, null=True)),
                ('short_description', wagtail.fields.RichTextField(blank=True, null=True)),
                ('event_start_date', models.DateField(blank=True, null=True)),
                ('event_end_date', models.DateField(blank=True, null=True)),
                ('event_start_time', models.TimeField(blank=True, null=True)),
                ('event_end_time', models.TimeField(blank=True, null=True)),
                ('event_venue', models.CharField(blank=True, max_length=500, null=True)),
                ('event_image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('display_on_home_page', models.BooleanField(default=True)),
                ('can_register', models.BooleanField(default=False)),
                ('external_registration', models.BooleanField(default=False)),
                ('external_registration_link', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventRegistrationFormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, validators=[wagtail.contrib.forms.models.validate_to_address], verbose_name='to address')),
                ('from_address', models.EmailField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
                ('thankyou_page_title', models.CharField(help_text="Title text to use for the 'thank you' page", max_length=255)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.forms.models.FormMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('banner', cloudinary.models.CloudinaryField(blank=True, help_text='Select the background image for the hero section', max_length=255, null=True, verbose_name='image')),
                ('hero_section_title', models.CharField(max_length=500, null=True)),
                ('hero_section_text', wagtail.fields.RichTextField(blank=True, null=True)),
                ('about_church_title_1', models.CharField(blank=True, max_length=500, null=True)),
                ('about_church_text_1', wagtail.fields.RichTextField(blank=True, null=True)),
                ('about_church_image_1', cloudinary.models.CloudinaryField(blank=True, help_text='Select the first about us image', max_length=255, null=True, verbose_name='image')),
                ('about_church_title_2', models.CharField(blank=True, max_length=500, null=True)),
                ('about_church_text_2', wagtail.fields.RichTextField(blank=True, null=True)),
                ('about_church_image_2', cloudinary.models.CloudinaryField(blank=True, help_text='Select the second about us image', max_length=255, null=True, verbose_name='image')),
                ('about_church_title_3', models.CharField(blank=True, max_length=500, null=True)),
                ('about_church_text_3', wagtail.fields.RichTextField(blank=True, null=True)),
                ('about_church_image_3', cloudinary.models.CloudinaryField(blank=True, help_text='Select the third about us image', max_length=255, null=True, verbose_name='image')),
                ('donate_main_text', models.CharField(blank=True, help_text='make text as short as possible', max_length=500, null=True)),
                ('donate_main_subtext', models.CharField(blank=True, help_text='make text as short as possible', max_length=1000, null=True)),
                ('donate_background_image', cloudinary.models.CloudinaryField(blank=True, help_text='Select image to use as donate background image', max_length=255, null=True, verbose_name='image')),
                ('church_name', models.CharField(blank=True, help_text='Enter the name of the church e.g DLCF Nashville', max_length=500, null=True)),
                ('church_address', models.CharField(blank=True, help_text='Enter the church address', max_length=500, null=True)),
                ('church_google_map_embed_iframe', models.URLField(blank=True, help_text='Enter the church location google map iframe embed src link', max_length=1000, null=True)),
                ('church_location_image', cloudinary.models.CloudinaryField(blank=True, help_text='Select image of church location', max_length=255, null=True, verbose_name='image')),
                ('church_description1', models.CharField(blank=True, help_text='Enter a very short inspiring message here', max_length=500, null=True)),
                ('church_description2', models.CharField(blank=True, help_text='Enter a very short inspiring message here', max_length=500, null=True)),
                ('connect_with_us_sub_text', models.CharField(blank=True, help_text='Enter a very short inspiring message here', max_length=500, null=True)),
                ('connect_with_us_image', cloudinary.models.CloudinaryField(blank=True, help_text='Select image for connect with us background image', max_length=255, null=True, verbose_name='image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='IamNew',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('caption_title', models.CharField(blank=True, help_text='Write a short inspiring heading', max_length=1000, null=True)),
                ('caption_text', wagtail.fields.RichTextField(blank=True, null=True)),
                ('banner', cloudinary.models.CloudinaryField(blank=True, help_text='Select a background image banner', max_length=255, null=True, verbose_name='image')),
                ('first_section_title', models.CharField(blank=True, help_text='Write a short inspiring heading', max_length=1000, null=True)),
                ('first_section_body', wagtail.fields.RichTextField(blank=True, null=True)),
                ('second_section_title', models.CharField(blank=True, help_text='Write a short inspiring heading', max_length=1000, null=True)),
                ('second_section_body', wagtail.fields.RichTextField(blank=True, null=True)),
                ('third_section_title', models.CharField(blank=True, help_text='Write a short inspiring heading', max_length=1000, null=True)),
                ('third_section_body', wagtail.fields.RichTextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SubscribeFormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, validators=[wagtail.contrib.forms.models.validate_to_address], verbose_name='to address')),
                ('from_address', models.EmailField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.forms.models.FormMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='WorshipService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_title', models.CharField(blank=True, max_length=500, null=True)),
                ('service_description', models.CharField(blank=True, max_length=500, null=True)),
                ('service_day', models.CharField(blank=True, choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=500, null=True)),
                ('start_time', models.CharField(blank=True, max_length=500, null=True)),
                ('service_image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
            ],
        ),
        migrations.CreateModel(
            name='ContactFormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.TextField(blank=True, help_text='Default value. Comma or new line separated values supported for checkboxes.', verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='home.contactformpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContactFormSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_form_page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailcore.page')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_data', models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('submit_time', models.DateTimeField(auto_now_add=True, verbose_name='submit time')),
                ('first_name', models.CharField(max_length=1000, null=True)),
                ('last_name', models.CharField(max_length=1000, null=True)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.event')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'form submission',
                'verbose_name_plural': 'form submissions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImportantPages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('contact', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('donate', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('home', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('outreach', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('scholarship', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email1', models.EmailField(blank=True, help_text='Your Email address', max_length=254, null=True)),
                ('address', models.CharField(blank=True, max_length=500, null=True)),
                ('phone2', models.CharField(blank=True, max_length=500, null=True)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteLogo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteSocial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook', models.URLField(blank=True, max_length=500, null=True)),
                ('twitter', models.URLField(blank=True, max_length=500, null=True)),
                ('instagram', models.URLField(blank=True, max_length=500, null=True)),
                ('threads', models.URLField(blank=True, max_length=500, null=True)),
                ('linkedin', models.URLField(blank=True, max_length=500, null=True)),
                ('youtube', models.URLField(blank=True, max_length=500, null=True)),
                ('tiktok', models.URLField(blank=True, max_length=500, null=True)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubscribeFormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.TextField(blank=True, help_text='Default value. Comma or new line separated values supported for checkboxes.', verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='home.subscribeformpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubscribeFormSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
                ('subscribe_form_page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
